"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

var _parentElement = new WeakMap();

var _data = new WeakMap();

class RecipeView {
  constructor() {
    _parentElement.set(this, {
      writable: true,
      value: document.querySelector(".popup__content")
    });

    _data.set(this, {
      writable: true,
      value: void 0
    });

    _defineProperty(this, "_renderSpinner", function (parentEl) {
      const markup = `
<div class="lds-ring"><div></div><div></div><div></div><div></div></div>
  `;

      this._clear();

      _classPrivateFieldGet(this, _parentElement).insertAdjacentHTML(`afterbegin`, markup);
    });
  }

  render(data) {
    _classPrivateFieldSet(this, _data, data);

    const markup = this._generateMarkup();

    this._clear();

    _classPrivateFieldGet(this, _parentElement).insertAdjacentHTML(`afterbegin`, markup);
  }

  _clear() {
    _classPrivateFieldGet(this, _parentElement).innerHTML = "";
  }

  _generateMarkup() {
    return `
            <figure class="popup__fig">
          <img src="${_classPrivateFieldGet(this, _data).image}" alt="${_classPrivateFieldGet(this, _data).title}" class="popup__img" />
        </figure>
        <div class="popup__title">
          <h1 class="header-2 header-2--sp mr-small">${_classPrivateFieldGet(this, _data).title}</h1>
        </div>
        <div class="popup__controller">
          <div class="popup__durationBlock">
            <svg class="popup__icon popup__icon--1">
              <use href="${icons}#icon-stopwatch"></use>
            </svg>
            <span class="span-3 span-3--duration duration ml-small"
              >${_classPrivateFieldGet(this, _data).cookingTime} mins</span
            >
          </div>
          <div class="popup__servingBlock">
            <svg class="popup__icon popup__icon--2">
              <use href="${icons}#icon-users"></use>
            </svg>
            <span class="span-3 span-3--servings servings ml-small">${_classPrivateFieldGet(this, _data).servings}</span>
            <div class="popup__btns ml-small">
              <button class="btn--add btn--controller">
                <svg class="popup__icon popup__icon--3">
                  <use href="${icons}#icon-plus"></use>
                </svg>
              </button>

              <button class="btn--minus btn--controller">
                <svg class="popup__icon popup__icon--3">
                  <use href="${icons}#icon-minus"></use>
                </svg>
              </button>
            </div>
          </div>
          <button class="btn--book">
            <svg class="popup__icon popup__icon--3">
              <use href="${icons}#icon-bookmark"></use>
            </svg>
          </button>
        </div>

        <div class="popup__ingredients">
          <h2 class="header-2">Ingredients</h2>
          <ul class="popup__ingredients--list">
          ${_classPrivateFieldGet(this, _data).ingredients.map(ing => {
      return `
            <li class="popup__recipe">
              <div class="popup__quantity">${ing.quantity}</div>
              <div class="popup__description">${ing.unit} ${ing.description}</div>
            </li>            
            `;
    }).join("")}

          </ul>
        </div>
        <div class="popup__directions">
          <a href="${_classPrivateFieldGet(this, _data).sourceUrl}" target="_blank" class="btn--direction popup__btn mb-small"><span>Directions</span></a>
        </div>
    `;
  }

}

var _default = new RecipeView();

exports.default = _default;