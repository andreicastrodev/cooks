"use strict";

require("core-js/modules/es.typed-array.float32-array.js");

require("core-js/modules/es.typed-array.float64-array.js");

require("core-js/modules/es.typed-array.int8-array.js");

require("core-js/modules/es.typed-array.int16-array.js");

require("core-js/modules/es.typed-array.int32-array.js");

require("core-js/modules/es.typed-array.uint8-array.js");

require("core-js/modules/es.typed-array.uint8-clamped-array.js");

require("core-js/modules/es.typed-array.uint16-array.js");

require("core-js/modules/es.typed-array.uint32-array.js");

require("core-js/modules/es.typed-array.from.js");

require("core-js/modules/es.typed-array.of.js");

require("core-js/modules/web.immediate.js");

require("core-js/modules/web.url.js");

require("core-js/modules/web.url.to-json.js");

require("core-js/modules/web.url-search-params.js");

var model = _interopRequireWildcard(require("./model.js"));

var _sprite = _interopRequireDefault(require("url:../img/sprite.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

console.log(_sprite.default);
const recipeContainer = document.querySelector(".popup__content");

const timeout = function (s) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new Error(`Request took too long! Timeout after ${s} second`));
    }, s * 1000);
  });
}; // https://forkify-api.herokuapp.com/v2
///////////////////////////////////////


const renderSpinner = function (parentEl) {
  const markup = `
<div class="lds-ring"><div></div><div></div><div></div><div></div></div>
  `;
  parentEl.innerHTML = ``;
  parentEl.insertAdjacentHTML(`afterbegin`, markup);
};

const showRecipe = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;
    renderSpinner(recipeContainer); // load recipe

    model.loadRecipe(id);
    const markup = `
            <figure class="popup__fig">
          <img src="${recipe.image}" alt="${recipe.title}" class="popup__img" />
        </figure>
        <div class="popup__title">
          <h1 class="header-2 header-2--sp mr-small">${recipe.title}</h1>
        </div>
        <div class="popup__controller">
          <div class="popup__durationBlock">
            <svg class="popup__icon popup__icon--1">
              <use href="${_sprite.default}#icon-stopwatch"></use>
            </svg>
            <span class="span-3 span-3--duration duration ml-small"
              >${recipe.cookingTime} mins</span
            >
          </div>
          <div class="popup__servingBlock">
            <svg class="popup__icon popup__icon--2">
              <use href="${_sprite.default}#icon-users"></use>
            </svg>
            <span class="span-3 span-3--servings servings ml-small">${recipe.servings}</span>
            <div class="popup__btns ml-small">
              <button class="btn--add btn--controller">
                <svg class="popup__icon popup__icon--3">
                  <use href="${_sprite.default}#icon-plus"></use>
                </svg>
              </button>

              <button class="btn--minus btn--controller">
                <svg class="popup__icon popup__icon--3">
                  <use href="${_sprite.default}#icon-minus"></use>
                </svg>
              </button>
            </div>
          </div>
          <button class="btn--book">
            <svg class="popup__icon popup__icon--3">
              <use href="${_sprite.default}#icon-bookmark"></use>
            </svg>
          </button>
        </div>

        <div class="popup__ingredients">
          <h2 class="header-2">Ingredients</h2>
          <ul class="popup__ingredients--list">
          ${recipe.ingredients.map(ing => {
      return `
            <li class="popup__recipe">
              <div class="popup__quantity">${ing.quantity}</div>
              <div class="popup__description">${ing.unit} ${ing.description}</div>
            </li>            
            `;
    }).join("")}

          </ul>
        </div>
        <div class="popup__directions">
          <a href="${recipe.sourceUrl}" target="_blank" class="btn--direction popup__btn mb-small"><span>Directions</span></a>
        </div>
    `;
    recipeContainer.innerHTML = "";
    recipeContainer.insertAdjacentHTML(`afterbegin`, markup);
  } catch (err) {
    console.error(err);
  }
};

["hashchange", `load`].forEach(e => window.addEventListener(e, showRecipe)); // window.addEventListener(`hashchange`, showRecipe)
// window.addEventListener(`load`, showRecipe);